class Solution(object):
    def longestIncreasingPath(self, matrix):
        if not matrix or not matrix[0]:
            return 0
        rows, cols = len(matrix), len(matrix[0])
        memo = [[0] * cols for _ in range(rows)]
        def dfs(r, c):
            if memo[r][c]:
                return memo[r][c]
            val = matrix[r][c]
            max_len = 1
            for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                nr, nc = r + dr, c + dc
                if 0 <= nr < rows and 0 <= nc < cols and matrix[nr][nc] > val:
                    max_len = max(max_len, 1 + dfs(nr, nc))
            memo[r][c] = max_len
            return max_len
        return max(dfs(r, c) for r in range(rows) for c in range(cols))